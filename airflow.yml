version: "3.3"
services:
  airflow-init:
    image: 212095042672.dkr.ecr.ap-south-1.amazonaws.com/airflow:latest
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R ":0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    user: 0:0
    environment:
      AIRFLOW__CELERY__BROKER_URL: redis://:<your-redis-password>@redis:6379/0
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _AIRFLOW_WWW_USER_USERNAME: airflow
    volumes:
      - airflow_data:/sources
    networks:
      - apperture_net
    secrets:
      - source: airflow_latest_1.env
        target: /opt/airflow/.env
    logging:
      driver: json-file
    deploy:
      restart_policy:
        condition: none
      placement:
        constraints:
          - node.hostname == worker4
  airflow-scheduler:
    image: 212095042672.dkr.ecr.ap-south-1.amazonaws.com/airflow:latest
    command:
      - scheduler
    user: "50000:0"
    environment:
      AIRFLOW__CELERY__BROKER_URL: redis://:<your-redis-password>@redis:6379/0
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      BACKEND_API_KEY_NAME: apperture-api-key
      BACKEND_API_KEY_SECRET: <your-backend-api-key-secret>
      BACKEND_BASE_URL: http://backend:8001
      CLICKSTREAM_BACKUP_FOLDER: incremental_backup
      GOOGLE_ADS_CLIENT_ID: <your-google-ads-client-id>
      GOOGLE_ADS_CLIENT_SECRET: <your-google-ads-client-secret>
      GOOGLE_ADS_DEVELOPER_TOKEN: <your-google-ads-developer-token>
      GOOGLE_ADS_LOGIN_CUSTOMER_ID: <your-google-ads-login-customer-id>
      MIGRATE_EVENTS_CSV: <your-migrate-events-csv>
      S3_ACCESS_KEY_ID: <your-s3-access-key-id>
      S3_SECRET_ACCESS_KEY: <your-s3-secret-access-key>
      SLACK_URL_AIRFLOW_ALERTS: <your-slack-webhook-url>
      SLACK_URL_AIRFLOW_ALERTS_DATAMART: <your-slack-webhook-url>
      SLACK_URL_CDC_INTERNAL_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WARNING_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WIOM_CDC_ALERTS: <your-slack-webhook-url>
    networks:
      - apperture_net
    secrets:
      - source: airflow_latest_1.env
        target: /opt/airflow/.env
    logging:
      driver: awslogs
      options:
        awslogs-group: apperture-prod-airflow
        awslogs-region: ap-south-1
        awslogs-stream: airflow-scheduler
    deploy:
      labels:
        swarmpit.service.deployment.autoredeploy: "true"
      placement:
        constraints:
          - node.hostname == worker4
      resources:
        reservations:
          memory: 400M
        limits:
          memory: 1024M
  airflow-triggerer:
    image: 212095042672.dkr.ecr.ap-south-1.amazonaws.com/airflow:latest
    command:
      - triggerer
    user: "50000:0"
    environment:
      AIRFLOW__CELERY__BROKER_URL: redis://:<your-redis-password>@redis:6379/0
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      BACKEND_API_KEY_NAME: apperture-api-key
      BACKEND_API_KEY_SECRET: <your-backend-api-key-secret>
      BACKEND_BASE_URL: http://backend:8001
      CLICKSTREAM_BACKUP_FOLDER: incremental_backup
      GOOGLE_ADS_CLIENT_ID: <your-google-ads-client-id>
      GOOGLE_ADS_CLIENT_SECRET: <your-google-ads-client-secret>
      GOOGLE_ADS_DEVELOPER_TOKEN: <your-google-ads-developer-token>
      GOOGLE_ADS_LOGIN_CUSTOMER_ID: <your-google-ads-login-customer-id>
      MIGRATE_EVENTS_CSV: https://cdn.apperture.io/backfill_12june.csv
      S3_ACCESS_KEY_ID: <your-s3-access-key-id>
      S3_SECRET_ACCESS_KEY: <your-s3-secret-access-key>
      SLACK_URL_AIRFLOW_ALERTS: <your-slack-webhook-url>
      SLACK_URL_AIRFLOW_ALERTS_DATAMART: <your-slack-webhook-url>
      SLACK_URL_CDC_INTERNAL_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WARNING_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WIOM_CDC_ALERTS: <your-slack-webhook-url>
    networks:
      - apperture_net
    secrets:
      - source: airflow_latest_1.env
        target: /opt/airflow/.env
    logging:
      driver: awslogs
      options:
        awslogs-group: apperture-prod-airflow
        awslogs-region: ap-south-1
        awslogs-stream: airflow-triggerer
    deploy:
      labels:
        swarmpit.service.deployment.autoredeploy: "true"
      placement:
        constraints:
          - node.hostname == worker4
      resources:
        reservations:
          cpus: "0.25"
          memory: 256M
        limits:
          cpus: "0.5"
          memory: 512M
  airflow-webserver:
    image: 212095042672.dkr.ecr.ap-south-1.amazonaws.com/airflow:latest
    command:
      - webserver
    user: "50000:0"
    environment:
      AIRFLOW__CELERY__BROKER_URL: redis://:<your-redis-password>@redis:6379/0
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      BACKEND_API_KEY_NAME: apperture-api-key
      BACKEND_API_KEY_SECRET: <your-backend-api-key-secret>
      BACKEND_BASE_URL: http://backend:8001
      CH_DATABASE: default
      CH_HOST: <your-clickhouse-host>
      CH_PASSWORD: <your-clickhouse-password>
      CH_PORT: "8123"
      CH_USERNAME: default
      CLICKSTREAM_BACKUP_FOLDER: incremental_backup
      GOOGLE_ADS_CLIENT_ID: <your-google-ads-client-id>
      GOOGLE_ADS_CLIENT_SECRET: <your-google-ads-client-secret>
      GOOGLE_ADS_DEVELOPER_TOKEN: <your-google-ads-developer-token>
      GOOGLE_ADS_LOGIN_CUSTOMER_ID: <your-google-ads-login-customer-id>
      MIGRATE_EVENTS_CSV: https://cdn.apperture.io/backfill_12june.csv
      MSSQL_DATABASE: log_db
      MSSQL_PASSWORD: <your-mssql-password>
      MSSQL_SERVER: <your-mssql-server>
      MSSQL_USERNAME: <your-mssql-username>
      S3_ACCESS_KEY_ID: <your-s3-access-key-id>
      S3_SECRET_ACCESS_KEY: <your-s3-secret-access-key>
      SLACK_URL_AIRFLOW_ALERTS: <your-slack-webhook-url>
      SLACK_URL_AIRFLOW_ALERTS_DATAMART: <your-slack-webhook-url>
      SLACK_URL_CDC_INTERNAL_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WARNING_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WIOM_CDC_ALERTS: <your-slack-webhook-url>
    ports:
      - 8080:8080
    networks:
      - apperture_net
      - traefik-public
    secrets:
      - source: airflow_latest_1.env
        target: /opt/airflow/.env
    logging:
      driver: awslogs
      options:
        awslogs-group: apperture-prod-airflow
        awslogs-region: ap-south-1
        awslogs-stream: airflow-webserver
    deploy:
      labels:
        traefik.http.routers.airflow-webserver-http.middlewares: https-redirect
        traefik.http.routers.airflow-webserver-http.entrypoints: http
        traefik.http.routers.airflow-webserver-https.tls: "true"
        swarmpit.service.deployment.autoredeploy: "true"
        traefik.http.routers.airflow-webserver-https.rule: Host(`airflow.apperture.io`)
        traefik.http.routers.airflow-webserver-http.rule: Host(`airflow.apperture.io`)
        traefik.constraint-label: traefik-public
        traefik.http.routers.airflow-webserver-https.entrypoints: https
        traefik.http.services.airflow-webserver.loadbalancer.server.port: "8080"
        traefik.docker.network: traefik-public
        traefik.enable: "true"
        traefik.http.routers.airflow-webserver-https.tls.certresolver: le
      placement:
        constraints:
          - node.hostname == worker4
  airflow-worker:
    image: 212095042672.dkr.ecr.ap-south-1.amazonaws.com/airflow:latest
    command:
      - celery
      - worker
    user: "50000:0"
    environment:
      AIRFLOW__CELERY__BROKER_URL: redis://:<your-redis-password>@redis:6379/0
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
      BACKEND_API_KEY_NAME: apperture-api-key
      BACKEND_API_KEY_SECRET: <your-backend-api-key-secret>
      BACKEND_BASE_URL: http://backend:8001
      CH_DATABASE: default
      CH_HOST: <your-clickhouse-host>
      CH_PASSWORD: <your-clickhouse-password>
      CH_PORT: "8123"
      CH_USERNAME: default
      CLICKSTREAM_BACKUP_FOLDER: incremental_backup
      DUMB_INIT_SETSID: "0"
      GOOGLE_ADS_CLIENT_ID: <your-google-ads-client-id>
      GOOGLE_ADS_CLIENT_SECRET: <your-google-ads-client-secret>
      GOOGLE_ADS_DEVELOPER_TOKEN: <your-google-ads-developer-token>
      GOOGLE_ADS_LOGIN_CUSTOMER_ID: <your-google-ads-login-customer-id>
      MIGRATE_EVENTS_CSV: https://cdn.apperture.io/backfill_12june.csv
      MSSQL_DATABASE: log_db
      MSSQL_PASSWORD: <your-mssql-password>
      MSSQL_SERVER: <your-mssql-server>
      MSSQL_USERNAME: <your-mssql-username>
      S3_ACCESS_KEY_ID: <your-s3-access-key-id>
      S3_SECRET_ACCESS_KEY: <your-s3-secret-access-key>
      SLACK_URL_AIRFLOW_ALERTS: <your-slack-webhook-url>
      SLACK_URL_AIRFLOW_ALERTS_DATAMART: <your-slack-webhook-url>
      SLACK_URL_CDC_INTERNAL_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WARNING_ALERTS: <your-slack-webhook-url>
      SLACK_URL_WIOM_CDC_ALERTS: <your-slack-webhook-url>
    networks:
      - apperture_net
    secrets:
      - source: airflow_latest_1.env
        target: /opt/airflow/.env
    logging:
      driver: awslogs
      options:
        awslogs-group: apperture-prod-airflow
        awslogs-region: ap-south-1
        awslogs-stream: airflow-worker
    deploy:
      replicas: 2
      labels:
        swarmpit.service.deployment.autoredeploy: "true"
      placement:
        constraints:
          - node.hostname == worker4
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_USER: airflow
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - apperture_net
    logging:
      driver: json-file
    deploy:
      placement:
        constraints:
          - node.hostname == worker4
networks:
  apperture_net:
    external: true
  traefik-public:
    external: true
volumes:
  postgres_data:
    external: true
secrets:
  airflow_latest_1.env:
    external: true
