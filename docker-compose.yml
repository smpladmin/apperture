version: "3.9"
x-airflow-common: &airflow-common
  build:
    context: ./airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    AIRFLOW__CELERY__BROKER_URL: redis://:2a49678b99e3bfbf33de89ba65899a0e@redis:6379/0
  volumes:
    - ./airflow:/opt/airflow
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: "service_started"
    postgres:
      condition: "service_started"

services:
  frontend:
    build:
      context: ./frontend
      target: dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/code
      - /code/node_modules
    depends_on:
      - backend
  backend:
    build:
      context: ./backend
      target: dev
    ports:
      - "8001:8001"
    volumes:
      - ./backend:/code
    depends_on:
      - db
      - redis
  events_producer:
    restart: on-failure
    build:
      context: ./events_producer
      target: dev
    ports:
      - "8002:8002"
    volumes:
      - ./events_producer:/code
    depends_on:
      - kafka
  events_consumer:
    restart: on-failure
    build:
      context: ./events_consumer
      target: dev
    volumes:
      - ./events_consumer:/code
    depends_on:
      - kafka
  event_logs_producer:
    restart: on-failure
    build:
      context: ./event_logs_producer
      target: dev
    ports:
      - "8084:8084"
    volumes:
      - ./event_logs_producer:/code
    depends_on:
      - kafka
  event_logs_consumer:
    restart: on-failure
    build:
      context: ./event_logs_consumer
      target: dev
    volumes:
      - ./event_logs_consumer:/code
    depends_on:
      - kafka
  cdc_consumer:
    restart: on-failure
    build:
      context: ./cdc_consumer
      target: dev
    volumes:
      - ./cdc_consumer:/code
    depends_on:
      - kafka
  data_processor:
    build:
      context: ./data_processor
      target: dev
    volumes:
      - ./data_processor:/code
    depends_on:
      - backend
      - redis
      - clickhouse
  scheduler:
    build:
      context: ./scheduler
      target: dev
    depends_on:
      - backend
      - redis
  chrome:
    image: browserless/chrome
    container_name: "chrome"
    ports:
      - "3001:3000"
  db:
    image: "mongo"
    container_name: "mongodb"
    environment:
      - MONGO_INITDB_DATABASE=apperture_db
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    command:
      - "--quiet"
      - "--logpath"
      - "/var/log/mongodb/mongod.log"
    ports:
      - "27017-27019:27017-27019"
    volumes:
      - mongodata:/data/db
  redis:
    image: redis:latest
    command: >
      --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - "redisdata:/data/db"
  clickhouse:
    image: "clickhouse/clickhouse-server:23.3.1"
    container_name: clickhouse
    ports:
      - 8123:8123
      - 9000:9000
    volumes:
      - ch_data:/var/lib/clickhouse/
      - ch_logs:/var/log/clickhouse-server/
  kafka:
    image: "bitnami/kafka:latest"
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_MAX_REQUEST_SIZE=5242880
      - KAFKA_CFG_MESSAGE_MAX_BYTES=5242880
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=7864320
      - ALLOW_PLAINTEXT_LISTENER=yes # FIXME: kafka gives warning for this
    volumes:
      - kafka_data1:/bitnami/kafka
    depends_on:
      - kafka2
      - kafka3
  kafka2:
    image: "bitnami/kafka:latest"
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka2:9092,CONTROLLER://kafka2:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9092
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_MAX_REQUEST_SIZE=5242880
      - KAFKA_CFG_MESSAGE_MAX_BYTES=5242880
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=7864320
      - ALLOW_PLAINTEXT_LISTENER=yes # FIXME: kafka gives warning for this
    volumes:
      - kafka_data2:/bitnami/kafka
  kafka3:
    image: "bitnami/kafka:latest"
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=OTMwNzFhYTY1ODNiNGE5OT
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka3:9092,CONTROLLER://kafka3:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka3:9092,
      - KAFKA_BROKER_ID=3
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093,2@kafka2:9093,3@kafka3:9093
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_MAX_REQUEST_SIZE=5242880
      - KAFKA_CFG_MESSAGE_MAX_BYTES=5242880
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=7864320
      - ALLOW_PLAINTEXT_LISTENER=yes # FIXME: kafka gives warning for this
    volumes:
      - kafka_data3:/bitnami/kafka
  connect:
    image: quay.io/debezium/connect:2.4
    container_name: connect
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5431:5432"
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      <<: *airflow-common-depends-on
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    depends_on:
      <<: *airflow-common-depends-on
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    depends_on:
      <<: *airflow-common-depends-on

volumes:
  postgres_data:
  mongodata: {}
  redisdata: {}
  ch_data: {}
  ch_logs: {}
  kafka_data1: {}
  kafka_data2: {}
  kafka_data3: {}
